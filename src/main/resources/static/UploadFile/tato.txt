private static String DIRVER;
private static String URL;
private static String PASSWORD;
 static {
try {
Properties pps = System.getProperties();
            pps.load(new FileInputStream("src/jdbc.properties"));
            DIRVER = pps.getProperty("driver");
            URL = pps.getProperty("url");
            USER = pps.getProperty("user");
            PASSWORD = pps.getProperty("password");
            Class.forName(DIRVER);
} catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
/**封装数据库链接/
public static Connection getConn(){
  try {
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
/**封装资源回收/
public static void close(ResultSet rs, Statement stat, Connection conn) {
        try {
            if (rs != null)
                rs.close();
            if (stat != null)
                stat.close();
            if (conn != null)
                conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        System.out.println(getConn());
    }
 
外部键值文件：
###mysql connection information##
driver=com.mysql.jdbc.Driver
url= jdbc:mysql://127.0.0.1:3306/db01   /**你要链接到那个数据库/
user=root
password=root


useUnicode=true&characterEncoding=utf8

static {
try {
//加载数据库驱动程序
Class.forName(DRIVER);
}catch(ClassNotFoundException e){
System.out.println("load miss");
System.out.println(e.getMessage());
}
}
 public Connection getConnection() {          
try {              
// 获取连接              
connnection = DriverManager.getConnection(URLSTR, USERNAME,                      
USERPASSWORD);
} catch (SQLException e) {             
 System.out.println(e.getMessage());          
}          
return connnection;     
}  
public int executeUpdate(String sql, Object[] params){
 //受影响的行数
int affectedLine=0;
try{
connection=this.getConnection();
//调用SQL
preparedStatement=connection.prepareStatement(sql);
//参数赋值
if(params !=null){
for (int i=0; i<params.length;i++){
preparedStatement.setObject(i+1,params[i]);
}
}
//执行
affectedLine=preparedStatement.executUpdate();
}catch (SQLException e){
System.out.printl(e.getMessage());
}finally{
//释放资源
closeAll();
}
return affectedLine;
}
//查询
private ResultSet executeQueryRS(String sql, Object[] params){
  try{
connection=this.getConnection();
//调用SQL
preparStatement=connection.prepareStatement(sql);
//参数赋值
if(params !=null){
for(int i=0;i<params.length;i++){
preparedStatement.setObject(i+1,params[i]);
}
}
//执行
resultSet=preparedStatement.executeQuery();
}catch (SQLException e){
System.out.println(e.getMessaege());
}
return resultSet;
}
public List<object>excuteQuery(String sql,Object[] params){
ResultSet rs=executeQueryRS(sql,params);
//创建Rs对象
ResultSetMetaData rsmd=null;
//结果集列数
int columCount =0;
try{
rsmd=rs.getMetaData();
//获得结果集列数
columCount=rsmd.getColumCount();
}catch(SQLException e1){
System.out.println(el.getMessage());
}
List<Object>list= new ArrayList<Object>();
try{
//将rs结果保存到List中
while(rs.next()){
Map<String, Object> map=new HashMap<String, Object>();
for (int i=1;i<=columCount;i++){
map.put(rsmd.getColoumLabel(i),rs.getObject(i));
}
list.add(map);
}
}catch (SQLException e){
System.out.println(e.getMessage());
}finally{
closeAll();
}
return list;
}
//输出参数
public Object excuteQuery(String sql,Object[] params,int outParamsPos,int SqlType){
    Object object =null;
       connection=this.getConnecttion();
try{
//调用存储过程
callableStatement=connection.preparCall(sql);
//给参数赋值
if(params !=null){
for(int i=0;i<params.length;i++){
callableStatement.setObject(i+1,params[i]);
}
}
//注册输出参数
callableStatement.registerOutParamter(outParamPos,SqlType);
//执行
callableStatment.execute();
//得到输出参数
object=callableStatement.getObject(outParamPos);
}catch(SQLException e){
System.out.println(e.getMessage());
}finally{
//释放资源
closeAll();
}
return object;
}
private void closeAll(){
//关闭结果集对象
if(resultSet !=null){
try{
resultSet.close();
}catch(SQLException e){
System.out.println(e.getMessage());
}
}
//关闭pre对象
if (preparedStatement !=null){
try{
preparedStatement.close();
}catch（SQLException.e){
System.out.println(e.getMessage());
}
}
//关闭call对象
if(callableStatement !=null){
try{
callableStatement.close();
}catch(SQLException e){
System.out.println(e.getMessage());
}
}
//关闭connect对象
if(connection != null){
try{
 connection.close();
}catch(SQLException e){
System.out.println(e.getMessage());
}
}
}
} 


import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONObject;

private String jdbcDriver ="";
private String jdbcUrl ="";
private String jdbcUser ="";
private String jdbcPassword= "";


import java.sql.Connection;
import java.sql.DriverManger;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

private static Connection conn;
private static PreparedStatement;
private static ResultSet rs;

public static Connection getConnection(){
 try{
 Class .forName(Contants.driver);
 System,out.println(Contants.driver +"加载成功")；
}cartch(ClassNotFoundException e){
System.out.println(Contants.driver +"加载失败")；
  e.printlnStackTrace();
}
try{
conn=DriverManager.getConnection(Contants.url,Contats.user.name,Contants.password);
System.out.println(Contants.url+"连接成功")；
}catch(SQLException e){
Sysems.out.println(Contants.url +"连接失败");
e.prinlnStackTrace();
}
return conn;
}
public static void closeConnection(){
     if(ps !=null){
             try{
                   ps.close();
}catch (SQLException e){
     e.printStackTrace();
}
}
if(rs !=null){
try{
rs.close();
}catch (SQLException e){
      e.printStackTrace();
}
}
if(conn !=null){
try {
conn.close();
}catch (SQLException e){
  e.printStackTrace();
}
}
}
}
 

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLExecption;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
public static List<Student> getAllStudentInfo(){		
Connection conn = null;		
PreparedStatement ps = null;//		Statement stmt;		
ResultSet rs = null;
if(rs !=null){
try{
rs.close();
}catch (SQLException e){
e.printStackTrace();
}
}
if (ps !=null){
try{
ps.close();
}catch(SQLException e){
e.printStackTrace();
}
}
if (conn !=null){
try{
conn.close();
}catch(SQLException e){
e.printStackTrace();
}
}
}
return stu;
}


pubilc static Student getStudentInfoBySno(String sno){
Connection conn=null;
PreparedStatement ps=null;
ResultSet rs = null;
Student stu=null;
try {
conn=DBConn.getConnection();
String sql="SELECT*FROM student01 WHERE sno=?";
ps= conn.preparedStatement(sql);
ps.setNString(1,sno);
rs=ps.executeQuery();
while(rs.next()){
String sno1=rs.getString("sno");
 String sname=rs.getString("sname");
String dname=rs.getString("dname");
String ssex=rs.getString("ssex");
int cno=rs.getInt("cno");
int mark=rs.getInt("mark");
String type=rs.getString("type");
stu=new Student(sno1,sname,dname,ssex,cno,mark,type);
}
}catch(Exception e){
e.printStackTrace();
}finally{
     if(rs !=null){
try{
rs.close();
}catch (SQLException e){
e.printStackTrace();
}
}
if (ps !=null){
try{
ps.close();
}catch(SQLException e){
e.printStackTrace();
}
}
if (conn !=null){
try{
conn.close();
}catch(SQLException e){
e.printStackTrace();
}
}
}
return stu;
}

public static void insertStuInfo(Student stu){
Connection conn=null;
PreparedStatement ps=null;
try {
conn=DBConn.getConnection();
 String sql="INSERT INTO student01 (sno,sname,dname,ssex,cno,mark,type) VALUES(?,?,?,?,?,?,?)";
ps=conn.preparedStatement(sql);
ps.setString(1,stu.getSno());
ps.setString(2,stu.getSname());
ps.setString(3,stu.getDname());
ps.setString(4,stu.getSsex());
ps.setInt(5,stu.getCno());
ps.setFloat(6,stu.getMark());
ps.setString(7,stu.getType());
int insertCount=ps.executeUpdate();
System.out.println(isSuccess(insertCount));
}catch(Exception e){
e.printStackTrace();
}finally{
if (ps !=null){
try{
ps.close();
}catch(SQLException e){
e.printStackTrace();
}
}
if (conn !=null){
try{
conn.close();
}catch(SQLException e){
e.printStackTrace();
}
}
}
}
public static void deleteStuInfo(String sno) {
connection conn=null;
PreparedStatement ps=null;
try{
     conn=DBConn.getConnection();
String sql="DELETE FROM student01 WHERE sno=?";
ps=conn.prepareStatement(sql);
ps.setString(1,sno);
int deleteCount=ps.executeUpdate();
System.out.println(isSuccess(deleteCount));
}catch(Exception e){
e.printStackTrace();
}finally{
if (ps !=null){
try{
ps.close();
}catch(SQLException e){
e.printStackTrace();
}
}
if (conn !=null){
try{
conn.close();
}catch(SQLException e){
e.printStackTrace();
}
}
}
}
public static void modifyStuInfo(Student stu) throws SQLException {
     Connection conn=null;
PreparedStatement ps=null;
try{
     conn=DBConn.getConnection();
String sql="DELETE FROM student01 WHERE sno=?";
ps=conn.prepareStatement(sql);

ps.setString(1,stu.getSname());
ps.setString(2,stu.getDname());
ps.setString(3,stu.getSsex());
ps.setInt(4,stu.getCno());
ps.setFloat(5,stu.getMark());
ps.setString(6,stu.getType());
ps.setString(7,stu.getSno());
int count=ps.executeUpdate();
System.out.println(isSuccess(count));
}catch(Exception e){
e.printStackTrace();
}finally{
if (ps !=null){
try{
ps.close();
}catch(SQLException e){
e.printStackTrace();
}
}
if (conn !=null){
try{
conn.close();
}catch(SQLException e){
e.printStackTrace();
}
}
if(conn !=null){
conn.close();
}
}
}
public static String isSuccess(int count){
if(count>0){
return "操作成功"；
}else{
return "操作失败"；
}
}
public static int executeUpdate(Connection conn,String sql,Object[] param){
int result=0;
PreparedStatement ps=null;
try{
ps=conn.preparedStatement(sql);
if(param !=null){
for(int i=0;i<param.length;i++){
ps.setObject(i+1,param[i]);
}
}
result=ps.executeUpdate();
}catch (Exception e){
e.printStackTrace();
}
return result;
}
}





private String sno;
private String sname;
private String dname;
private String ssex;
private int cno;
private int mark;
private String type;
public Student(){
}
public Student(String sno,String sname,String dname,String ssex, int cno, int mark, String type){
super();
this.sno=sno;
this.sname=sname;
this.dname=dname;
this.ssex=ssex;
this.cno=cno;
this.mark=mark;
this.type=type;
}
public String getSno()[
return sno;
}
public void setSno(String sno){
this.sno=sno;
}
public String getSname()[
return sno;
}
public void setSname(String sname){
this.sname=sname;
}
public String getDname()[
return dname;
}
public void setDname(String dname){
this.dname=dname;
}
public String getSsex()[
return sno;
}
public void setSsex(String ssex){
this.ssex=ssex;
}
public String getCno()[
return sno;
}
public void setCno(int cno){
this.cno=cno;
}
public String getMark()[
return mark;
}
public void setMark(int mark){
this.mark=mark;
}
public String getType()[
return type;
}
public void setType(int type){
this.type=type;
}


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;

public static void main(String [] args){
connection conn=DBConn.getConnection();
System.out.println("conn:"+conn);
Student stu=new Student("2017","蔡小余","通信工程","男"，8,85,"必修")；
try{
 DBUtil.modifyStuInfo(stu);
}catch(SQLException e){
e.printStackTrace();
}
DBconn.closeConnection();
}
}


CREATE TABLE IF NOT EXISTS `student01`(
 `sno` VARCHAR(100) NOT NULL,
   `sname` VARCHAR(100) NOT NULL,
     `dname` VARCHAR(100) NOT NULL,
 `ssex` VARCHAR(100) NOT NULL,
 `cno` INT NOT NULL,
 `mark` INT NOT NULL,
 `type` VARCHAR(100) NOT NULL,
 `photo` LONGBLOB NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
有关索引的创建，和使用查看等。指定的主键也是一个索引。
 
create table `goods` (id int not null auto_increment primary key,goods_name varchar(20), goodspic varchar(30),goods_pri varchar(20), goods_name_en varchar(20));

 create table if not exists `goods`(
     `id` int not null auto_increment primary key,
     `seller` varchar(30) not null,
     `goods_name` varchar(20) not null,
     `goodspic` varchar(30) not null,
     `goods_pri` varchar(20) not null,
     `goods_name_en` varchar(20))ENGINE=InnoDB DEFAULT CHARSET=utf8;
create table if not exists `success`(
     `id` int not null auto_increment primary key,
     `seller` varchar(30) not null,
     `goods_name` varchar(20) not null,
     `goodspic` varchar(30) not null,
     `goods_pri` varchar(20) not null,
     `goods_name_en` varchar(20) not null) ENGINE=InnoDB DEFAULT CHARSET=utf8;
insert into student01(sno,sname,dname,ssex,cno,mark,type,photo) values("2017","邓光","工程造价","男",8,85,"必修");
Student stu=new Student("2017","邓光", "工程造价", "男", 8, 85, "必修")

delete from student01 where sno="2017";
insert into goods (id,goods_name,goodspic,goods_pri,goods_name_en) values("1","椅子","D:\webpic\chair01.jpg","90","");

稍有水平的开发者，应该始终以preparedStatement代替Statement也就是说，在任何时候都不要使用
statement 
插入图片的路径：（将包含图片的文件夹放在服务器下的该工程的文件夹内）在mysql中存储的路径表示 webpic/chair01.jpg。
String sno="2017";
Student stu =DBUtil.getStudentInfoBySno(sno);
System.out.println(stu.getSno()+","+stu.getSname()+","+stu.getDname()+","+stu.getSsex()+","+stu.getCno()+","+stu.getMark()+","+stu.getType());

String sno="2018";
DBUtil.deleteStuInfo(sno);


Student stu=new Student ("2017","peter", "math", "man", 9, 85, "major");
DBUtil.insertStuInfo(stu);

List<Student> stu=DBUtil.getALLStudentInfo();
Iterator<Student> it=stu.iterator();
while(it.hasNext()){
Student st=it.next();
System.out.println(stu.getSno()+","+stu.getSname()+","+stu.getDname()+","+stu.getSsex()+","+stu.getCno()+","+stu.getMark()+","+stu.getType());
}

指定位置插入段：
alter table 数据表名 add column 字段名 类型 修饰语句 位置
如：
alter table mxy_test add column birth int null after sex;
修改字段定义：
alter table 数据表名 modify column 字段名 新的定义；
删除字段：
alter table 数据表名 drop column 字段名;
修改mysql中root的密码：
update user set password("123456") where user='root';
接下来的一步是将数据库导出：
bin>mysqldump -uroot -p>test.sql
将数据库导入：
bin>mysql -u用户名 -p 数据库名 < 数据库名.sql
记得将导出的数据库复制到他们的mysql>bin目录下。

创建一个可以从任何地方连接服务器的一个超级用户：

mysql不支持的功能：
事务，视图，外键和引用完整性，存储过程和触发器。
删除数据库中的数据表：
rm -f test/student01.*;
执行备份命令的时候不要进入mysql的控制台再使用，这样会报错。
mysqldump -u root -p 数据库名>盘符:\\test.txt

Innodb是一个存储引擎。myisam也是。
了解主从复制。开发要建表，加索引，改表，开权限，添加防火墙。熟练使用mysqldump
数据库要是挂了怎么办 ，添加监控，开关实例，重启实例，要是空间快满了，就删除点二进制日志：purge binary logs to '日志名'
难一点的招你优化sql语句，注意explain和百度一些加索引的技巧
挑重点学习，推荐看视频，熟练使用之前，不去碰原理性的东西。

用文本方式将数据装入数据库表中：
LOAD DATA LOCAL INFILE "D:/mysql.txt" INTO TABLE MYTABLE;
导入.sql文件命令
示例：
>source d://mysql.sql;

重点：
将备份数据导入到数据库：
mysql -u root -p test
创建索引：
删除索引：
分析索引的效率：
方法：在一般的SQL语句前加上explain；
注意看网上实例。


创建新用户的步骤：
进入root权限;
mysql -u root -p
然后 insert into mysql.user(Host,User,Password) values("localhost","test",password("123456"));
记得刷新权限：
flush privileges; 
然后给用户授权
grant all privileges on mysql.user to test@localhost identified by '123456';
最后是登录测试：
mysql -u test -p 
(按提示输入密码，查看是否可以登录)

卸出建表指令：
shell> mysqladmin -u root -p -d databasename > a.sql
导入建表命令：
mysql > mysql -h myhost -u root -p database < sql.txt
用文本的方式将数据装入数据库表中：
mysql> LOAD DATA LOCAL INFILE "D:/mysql.txt" INTO TABLE MYTABLE

今晚第一次实验用户登录的时候仅仅是一个简单的身份验证，出现了服务器加载不了jdbc驱动导致验证
无法进行的错误： java.lang.ClassNotFoundException: com.mysql.jdbc.Driver。原因是没有能
将驱动给服务器解析，只需要将驱动包.jar复制到tomcat下的lib文件夹中即可。记住要先加载
驱动包到工程中。
关于权限的问题
在思考订单页面是否有必要，那么或许，购物车的显示页面咱们就不用application来显示了，但是还是觉得是在点击添加的时候application
出现的问题。在找一找安全添加购物车的方法。要不然那就只能忽略掉添加页面了。直接点进购物车，生成订单计算出所得的总和。
然后交货部分就无法实现两个session之间的交互，那就直接做出多个数据库，点击按钮同时删除旧的加入新的表中，
交给管理员和顾客通过按钮查看即可。最后一张表是交易成功的订单。
交货部分，无法实现

>>User name:root
>>User password:


  Huawei Integrated Access Software (MA5626).
  Copyright(C) Huawei Technologies Co., Ltd. 2002-2018. All rights reserved.


  User root has used a default password. Change the password in time.

MA5626>

MA5626>

MA5626>enable

MA5626#

MA5626#

MA5626#config

MA5626(config)#vlan 50 smart

MA5626(config)#port mode  0/0/1  gpon
 To change the uplink port mode, clear the service configuration on the port,
change the mode, save the data, and perform a restart operation, or erase the
data, and perform a restart operation. Are you sure to proceed?(y/n)[n]:y

MA5626(config)#

MA5626(config)#

MA5626(config)#port vlan 50 0/0 1

MA5626(config)#multi-service-port vlan 50 ?
---------------------------------------------
  Command of config Mode:
---------------------------------------------
board                 By board
port                  By port

MA5626(config)#multi-service-port vlan 50 port 0/1 1-8 ?
---------------------------------------------
  Command of config Mode:
---------------------------------------------
<cr>                  Please press ENTER to execute command
inbound               Inbound (from outside of device to inside of device)
rx-cttr               Rx Traffic Index ( from standard port to service port)
user-8021p            By user 802.1p
user-encap            By user encap type
user-vlan             By user vlan

MA5626(config)#multi-service-port vlan 50 port 0/1 1-8 ?
---------------------------------------------
  Command of config Mode:
---------------------------------------------
<cr>                  Please press ENTER to execute command
inbound               Inbound (from outside of device to inside of device)
rx-cttr               Rx Traffic Index ( from standard port to service port)
user-8021p            By user 802.1p
user-encap            By user encap type
user-vlan             By user vlan

MA5626(config)#multi-service-port vlan 50 port 0/1 1-8 user-vlan ?
---------------------------------------------
  Command of config Mode:
---------------------------------------------
other-all             By TLS
priority-tagged       By user priority-tagged
untagged              Untagged
user-vlanid<U><1,4095>
                      By user vlan

MA5626(config)#multi-service-port vlan 50 port 0/1 1-8 user-vlan untagged ?
---------------------------------------------
  Command of config Mode:
---------------------------------------------
<cr>                  Please press ENTER to execute command
inbound               Inbound (from outside of device to inside of device)
rx-cttr               Rx Traffic Index ( from standard port to service port)
user-encap            By user VLAN and encap type

MA5626(config)#multi-service-port vlan 50 port 0/1 1-8 user-vlan untagged rx-cttr 6 tx-cttr 6
  It will take several minutes, and console may timeout, please use command
idle-timeout to set time limit
  Are you sure to create service virtual port(s)? (y/n)[n]:y
  The number of total board in this operation:                      1
  The number of total service virtual port in this operation:       8
  Creating start...

  Creating end:
  The number of total service virtual port which need be created:   8
  The number of total service virtual port which have been created: 8

MA5626(config)#

MA5626(config)#save configuration

MA5626(config)#
  It will take several minutes to save configuration file, please wait...

MA5626(config)#

MA5626(config)#
  Configuration file had been saved successfully
  Note: The configuration file will take effect after being activated

MA5626(config)#

MA5626(config)#active configuration system
  System will reboot after this command, continue? (y/n)[n]:y

MA5626(config)#

MA5626(config)#

MA5626(config)#

MA5626(config)#

MA5626(config)#

MA5626(config)#

MA5626(config)#

遗失对主机的连接。

C:\Users\Kebote>

















insert into order01(id,seller,goods_name,goodspic,goods_pri,goods_name_en)values("1","head","chair","webpic/chair01.jpg","78","2");


超级管理员表
CREATE TABLE `Super_admin` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) DEFAULT NULL,
  `dename` varchar(20) DEFAULT NULL,
  `crtime` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

全体用户表：
CREATE TABLE `All_user` (
  `num` bigint(20) NOT NULL ,
  `username` varchar(20) DEFAULT NULL,
  `dename` varchar(20) DEFAULT NULL,
  `E-mail` varchar(20) DEFAULT NULL,
`phone` int(20) DEFAULT NULL,
`role` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`num`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
一般管理员：
CREATE TABLE `Admin` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) DEFAULT NULL,
  `dename` varchar(20) DEFAULT NULL,
  `crtime` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

部门表（用于规定某些部门以限定某些资源的访问）
CREATE TABLE `Department` (
  `denumber` bigint(20) NOT NULL,
  `dename` varchar(20) DEFAULT NULL,
  `crtime` date DEFAULT NULL,
 `staff` int(10) DEFAULT NULL,
  PRIMARY KEY (`denumber`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8;
部门权限表（也叫部门角色表）：


（想象不出来用户的权限表是怎样的结构）


